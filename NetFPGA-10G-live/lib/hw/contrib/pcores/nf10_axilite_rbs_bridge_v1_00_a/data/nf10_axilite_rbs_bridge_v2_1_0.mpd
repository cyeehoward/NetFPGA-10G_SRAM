################################################################################
#
#  NetFPGA-10G http://www.netfpga.org
#
#  File:
#        nf10_axilite_rbs_bridge_v2_1_0.mpd
#
#  Library:
#        hw/contrib/pcores/nf10_axilite_rbs_bridge_v1_10_a
#
#  Author:
#        Gianni Antichi, Muhammad Shahbaz
#
#  Description:
#        Microprocessor Peripheral Description File
#
#  Copyright notice:
#        Copyright (C) 2010, 2011 The Board of Trustees of The Leland Stanford
#                                 Junior University
#
#  Licence:
#        This file is part of the NetFPGA 10G development base package.
#
#        This file is free code: you can redistribute it and/or modify it under
#        the terms of the GNU Lesser General Public License version 2.1 as
#        published by the Free Software Foundation.
#
#        This package is distributed in the hope that it will be useful, but
#        WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#        Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with the NetFPGA source package.  If not, see
#        http://www.gnu.org/licenses/.
#
#

BEGIN nf10_axilite_rbs_bridge

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = HDL
OPTION IP_GROUP = Bus and Bridge:MICROBLAZE
OPTION DESC = NetFPGA-10G AXILITE to RBS Bridge 
OPTION LONG_DESC = NetFPGA-10G AXILITE to RBS Bridge 

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = M_RBS, BUS_STD = RBS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_RBS, BUS_STD = RBS, BUS_TYPE = TARGET

## AXILITE Parameters
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = S_AXI_ACLK, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE

### RBS Parameters
PARAMETER C_RBS_SRC_WIDTH = 2, DT = integer, BUS = M_RBS:S_RBS
PARAMETER C_RBS_RING_SIZE = 16, DT = integer, BUS = M_RBS:S_RBS
PARAMETER C_RBS_SRC_ID = 0, DT = integer, BUS = M_RBS:S_RBS

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

PORT S_RBS_REQ = REQ, DIR=I, BUS=S_RBS
PORT S_RBS_ACK = ACK, DIR=I, BUS=S_RBS
PORT S_RBS_RD_WR_L = RD_WR_L, DIR=I, BUS=S_RBS
PORT S_RBS_ADDR = ADDR, DIR=I, VEC=[(C_S_AXI_ADDR_WIDTH-2)-1:0], BUS=S_RBS
PORT S_RBS_DATA = DATA, DIR=I, VEC=[C_S_AXI_DATA_WIDTH-1:0], BUS=S_RBS
PORT S_RBS_SRC = SRC, DIR=I, VEC=[C_RBS_SRC_WIDTH-1:0], BUS=S_RBS
PORT M_RBS_REQ = REQ, DIR=O, BUS=M_RBS
PORT M_RBS_ACK = ACK, DIR=O, BUS=M_RBS
PORT M_RBS_RD_WR_L = RD_WR_L, DIR=O, BUS=M_RBS
PORT M_RBS_ADDR = ADDR, DIR=O, VEC=[(C_S_AXI_ADDR_WIDTH-2)-1:0], BUS=M_RBS
PORT M_RBS_DATA = DATA, DIR=O, VEC=[C_S_AXI_DATA_WIDTH-1:0], BUS=M_RBS
PORT M_RBS_SRC = SRC, DIR=O, VEC=[C_RBS_SRC_WIDTH-1:0], BUS=M_RBS

END
