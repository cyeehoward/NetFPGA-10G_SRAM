################################################################################
#
#  NetFPGA-10G http://www.netfpga.org
#
#  File:
#        sram_process_table_v1_00_a.mpd 
#
#  Author:
#        root
#
#  Description:
#        sram_process_table's Microprocessor Peripheral Description File
#
#  Copyright notice:
#        Copyright (C) 2010, 2011 The Board of Trustees of The Leland Stanford
#                                 Junior University
#
#  Licence:
#        This file is part of the NetFPGA 10G development base package.
#
#        This file is free code: you can redistribute it and/or modify it under
#        the terms of the GNU Lesser General Public License version 2.1 as
#        published by the Free Software Foundation.
#
#        This package is distributed in the hope that it will be useful, but
#        WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#        Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with the NetFPGA source package.  If not, see
#        http://www.gnu.org/licenses/.
#
#
BEGIN sram_process_table

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION IP_GROUP = NetFPGA-10G
OPTION DESC = Sram Process Table
OPTION LONG_DESC = Sram Process Table Peripheral Core

## IO Interfaces
IO_INTERFACE IO_IF = memory_0
IO_INTERFACE IO_IF = memory_1
IO_INTERFACE IO_IF = memory_2
IO_INTERFACE IO_IF = debug

## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## AXILITE Parameters
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = S_AXI_ACLK, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE
PARAMETER C_USE_WSTRB = 0, DT = INTEGER, RANGE = (0:1), BUS = S_AXI
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER, RANGE = (0:512), BUS = S_AXI

## Generics for VHDL or Parameters for Verilog
#PARAMETER C_M_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,128,256), BUS = M_AXIS:S_AXIS
#PARAMETER C_S_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,128,256), BUS = M_AXIS:S_AXIS
#PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS
#PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = s_axis
PARAMETER C_S_AXIS_DATA_WIDTH = 256, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = s_axis
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = s_axis
PARAMETER C_M_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = m_axis
PARAMETER C_M_AXIS_DATA_WIDTH = 256, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = m_axis
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = m_axis

PORT memclk = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT memclk_200 = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT memclk_270 = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK

## Ports
PORT s_axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXIS:S_AXIS:S_AXI
PORT s_axi_aresetn = "", DIR = I, SIGIS = RST
PORT s_axi_awaddr = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_awvalid = AWVALID, DIR = I, BUS = S_AXI
PORT s_axi_wdata = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_wstrb = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_wvalid = WVALID, DIR = I, BUS = S_AXI
PORT s_axi_bready = BREADY, DIR = I, BUS = S_AXI
PORT s_axi_araddr = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI
PORT s_axi_rready = RREADY, DIR = I, BUS = S_AXI
PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI
PORT s_axi_rdata = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_rvalid = RVALID, DIR = O, BUS = S_AXI
PORT s_axi_wready = WREADY, DIR = O, BUS = S_AXI
PORT s_axi_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_bvalid = BVALID, DIR = O, BUS = S_AXI
PORT s_axi_awready = AWREADY, DIR = O, BUS = S_AXI

PORT s_axis_tready = TREADY, ASSIGNMENT = REQUIRE, DIR=O, BUS=S_AXIS
PORT s_axis_tdata = TDATA, ASSIGNMENT = REQUIRE, DIR=I, VEC=[255:0], BUS=S_AXIS
PORT s_axis_tuser = TUSER, ASSIGNMENT = REQUIRE, DIR=I, VEC=[127:0], BUS=S_AXIS
PORT s_axis_tlast = TLAST, ASSIGNMENT = REQUIRE, DIR=I, BUS=S_AXIS
PORT s_axis_tvalid = TVALID, ASSIGNMENT = REQUIRE, DIR=I, BUS=S_AXIS
PORT s_axis_tstrb = TSTRB, ASSIGNMENT = REQUIRE, DIR=I, VEC=[31:0], BUS=S_AXIS
PORT m_axis_tvalid = TVALID, ASSIGNMENT = REQUIRE, DIR=O, BUS=M_AXIS
PORT m_axis_tdata = TDATA, ASSIGNMENT = REQUIRE, DIR=O, VEC=[255:0], BUS=M_AXIS
PORT m_axis_tuser = TUSER, ASSIGNMENT = REQUIRE, DIR=O, VEC=[127:0], BUS=M_AXIS
PORT m_axis_tlast = TLAST, ASSIGNMENT = REQUIRE, DIR=O, BUS=M_AXIS
PORT m_axis_tready = TREADY, ASSIGNMENT = REQUIRE, DIR=I, BUS=M_AXIS
PORT m_axis_tstrb = TSTRB, ASSIGNMENT = REQUIRE, DIR=O, VEC=[31:0], BUS=M_AXIS

PORT locked = "", DIR = I, ASSIGNMENT = REQUIRE

PORT qdr_d_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0, VEC = [36-1:0]
PORT qdr_q_0 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0, VEC = [36-1:0]
PORT qdr_sa_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0, VEC = [19-1:0]
PORT qdr_w_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0
PORT qdr_r_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0
PORT qdr_bw_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, VEC = [4-1:0]
PORT qdr_dll_off_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0
PORT qdr_cq_0 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_cq_n_0 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_c_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_k_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_c_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_k_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]

PORT qdr_d_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1, VEC = [36-1:0]
PORT qdr_q_1 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_1, VEC = [36-1:0]
PORT qdr_sa_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1, VEC = [19-1:0]
PORT qdr_w_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1
PORT qdr_r_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1
PORT qdr_bw_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1, VEC = [4-1:0]
PORT qdr_dll_off_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1
PORT qdr_cq_1 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_cq_n_1 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_c_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_k_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_c_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_k_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]

PORT qdr_d_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2, VEC = [36-1:0]
PORT qdr_q_2 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_2, VEC = [36-1:0]
PORT qdr_sa_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2, VEC = [19-1:0]
PORT qdr_w_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2
PORT qdr_r_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2
PORT qdr_bw_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2, VEC = [4-1:0]
PORT qdr_dll_off_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2
PORT qdr_cq_2 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_cq_n_2 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_c_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_k_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_c_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_k_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]

PORT masterbank_sel_pin = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [2:0]


PORT locked = "", DIR = I, ASSIGNMENT = REQUIRE

PORT debug_mem_controller_dout = "", DIR = O, IO_IF = debug,  VEC = [215:0]
PORT debug_mem_controller_dout_addr = "", DIR = O,  IO_IF = debug,  VEC = [18:0]
PORT debug_mem_controller_dout_ready = "", DIR = O,  IO_IF = debug,  VEC = [0:0]
PORT debug_calibration = "", DIR = O,  IO_IF = debug,  VEC = [2:0]
PORT mem_dbg = "", DIR = O, IO_IF = debug, VEC = [63:0]
PORT fifo_dbg = "", DIR = O, IO_IF = debug, VEC = [63:0]

end

