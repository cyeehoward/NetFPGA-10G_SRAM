diff -u verilog.org/cmp_rd_data.v verilog.cur/cmp_rd_data.v
--- verilog.org/cmp_rd_data.v	2008-03-14 15:28:12.000000000 +0000
+++ verilog.cur/cmp_rd_data.v	2012-10-04 00:02:26.871610400 +0100
@@ -60,6 +60,8 @@
 //
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  cmp_rd_data  (
@@ -181,8 +183,13 @@
 assign APP_COMPARE_DATA_MSB = APP_COMPARE_DATA[2*RL_DQ_WIDTH-1:RL_DQ_WIDTH];
 always @ (posedge CLK) begin
     for (i_msb = 0; i_msb < NUM_OF_BYTES; i_msb = i_msb + 1) begin
+`ifndef NF10
         msb_cmp[i_msb] <= &(~(read_data_MSB[(i_msb+1)*DEV_BYTE_WIDTH-1 -:DEV_BYTE_WIDTH] ^ 
                               APP_COMPARE_DATA_MSB[(i_msb+1)*DEV_BYTE_WIDTH-1 -:DEV_BYTE_WIDTH]));
+`else
+		msb_cmp[i_msb] <= &(~(read_data_MSB[(i_msb+1)*DEV_BYTE_WIDTH-2 -:(DEV_BYTE_WIDTH-1)] ^ 
+                              APP_COMPARE_DATA_MSB[(i_msb+1)*DEV_BYTE_WIDTH-2 -:(DEV_BYTE_WIDTH-1)]));
+`endif
     end
 end
 
@@ -221,8 +228,13 @@
 integer i_lsb;
 always @ (posedge CLK) begin
     for (i_lsb = 0; i_lsb < NUM_OF_BYTES; i_lsb = i_lsb + 1) begin
+`ifndef NF10
         lsb_cmp[i_lsb] <= &(~(read_data[(i_lsb+1)*DEV_BYTE_WIDTH-1 -:DEV_BYTE_WIDTH] ^ 
                               APP_COMPARE_DATA[(i_lsb+1)*DEV_BYTE_WIDTH-1 -:DEV_BYTE_WIDTH]));
+`else
+		lsb_cmp[i_lsb] <= &(~(read_data[(i_lsb+1)*DEV_BYTE_WIDTH-2 -:(DEV_BYTE_WIDTH-1)] ^ 
+                              APP_COMPARE_DATA[(i_lsb+1)*DEV_BYTE_WIDTH-2 -:(DEV_BYTE_WIDTH-1)]));
+`endif
     end
 end
 
diff -u verilog.org/rld_clk_module.v verilog.cur/rld_clk_module.v
--- verilog.org/rld_clk_module.v	2007-08-24 17:21:06.000000000 +0100
+++ verilog.cur/rld_clk_module.v	2012-10-03 23:56:47.419194900 +0100
@@ -58,14 +58,20 @@
 //
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_clk_module  (   
    sysClk_p,   // differential system clock input
+`ifndef NF10
    sysClk_n,
+`endif
 
    refClk_p,   // differential reference clock input
+`ifndef NF10
    refClk_n,
+`endif
    
    clk33,
    sysReset,
@@ -91,9 +97,13 @@
 // end of parameter definitions
 
    input    sysClk_p;
+`ifndef NF10
    input    sysClk_n;
+`endif
    input    refClk_p;
+`ifndef NF10
    input    refClk_n;       
+`endif
    input    sysReset;
    input    clk33;
    
@@ -120,17 +130,25 @@
    // -----------------------------------------------------------------------------
    // sysClk differential input buffer 
    // -----------------------------------------------------------------------------
+`ifndef NF10
    IBUFGDS  sysClk0  (
       .I  ( sysClk_p ),  // differential input pins
       .IB ( sysClk_n ),
       .O  ( sysClk )     // system clock, differential clock output
    );
+`else
+   assign sysClk = sysClk_p;
+`endif
 
+`ifndef NF10
    IBUFGDS  refClk0  (
       .I  ( refClk_p ),  // differential input pins
       .IB ( refClk_n ),
       .O  ( clk200 )     // reference clock, differential clock output
    );
+`else
+   assign clk200 = refClk_p;
+`endif
 
 // -----------------------------------------------------------------------------
 //slow clock for Demo 
diff -u verilog.org/rld_controller_iobs.v verilog.cur/rld_controller_iobs.v
--- verilog.org/rld_controller_iobs.v	2008-03-14 15:28:02.000000000 +0000
+++ verilog.cur/rld_controller_iobs.v	2012-10-04 04:51:02.645016000 +0100
@@ -60,6 +60,8 @@
 //   Rev 1.1 - Added IOB=TRUE to more of the control signals
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_controller_iobs  (
@@ -208,16 +210,26 @@
       end
 
       else if ( DEVICE_ARCH == 2'b01 )  begin : ba_virtex5_insts
+`ifndef NF10
          always @( posedge clk )
+`else
+         always @( posedge clk180 )
+`endif
          begin : Ba_fd
             ctlBa    <= ctl_Ba;
             ctlBa_d1 <= ctlBa;
             TEST_BA  <= ctlBa_d1;  // TEST probe for RC_BA[2:0] output signals
          end
-
+		 
+`ifndef NF10
          always @( posedge clk180 )
          begin : Ba_phy_fd
             if ( rstHard_180 )
+`else
+         always @( posedge clk90 )
+         begin : Ba_phy_fd
+            if ( rstHard_90 )
+`endif
                phy_ba <= {DEV_BA_WIDTH{1'b0}};
             else
                phy_ba <= ctlBa_d1;
@@ -274,15 +286,25 @@
       end
      
       else if ( DEVICE_ARCH == 2'b01 )  begin : ad_virtex5_insts
+`ifndef NF10
          always @( posedge clk )
+`else
+         always @( posedge clk180 )
+`endif
          begin : Ad_fd
             ctlAd    <= ctl_Ad;
             ctlAd_d1 <= ctlAd;
          end
 
+`ifndef NF10
          always @( posedge clk180 )
          begin : Ad_phy_fd
             if ( rstHard_180 )
+`else
+         always @( posedge clk90 )
+         begin : Ad_phy_fd
+            if ( rstHard_90 )
+`endif
                phy_a <= {DEV_AD_WIDTH{1'b0}};
             else
                phy_a <= ctlAd_d1;
@@ -341,14 +363,22 @@
       end
 
       else if ( DEVICE_ARCH == 2'b01 )  begin : cs_virtex5_insts
+`ifndef NF10
          always @( posedge clk )
+`else
+         always @( posedge clk180 )
+`endif
          begin : Cmd3_fd
             ctlCmd[3]    <= ctl_Cmd[3];
             ctlCmd_d1[3] <= ctlCmd[3];
             TEST_CS_N    <= ctlCmd_d1[3];  // TEST probe for RC_CS_N output signal
          end  
 
+`ifndef NF10
          always @( posedge clk180 or posedge sync_sysReset )  // D-flop, async preset
+`else
+         always @( posedge clk90 or posedge sync_sysReset )  // D-flop, async preset
+`endif
          begin : Cs_phy_fd
             if ( sync_sysReset )
                phy_cs_n <= {NUM_OF_DEVS{1'b1}};
@@ -412,14 +442,22 @@
       end
 
       else if ( DEVICE_ARCH == 2'b01 )  begin : we_virtex5_insts
+`ifndef NF10
          always @( posedge clk )
+`else
+         always @( posedge clk180 )
+`endif
          begin : We_fd
             ctlCmd[1]    <= ctl_Cmd[1];
             ctlCmd_d1[1] <= ctlCmd[1];
             TEST_WE_N    <= ctlCmd_d1[1];  // TEST probe for RC_WE_N output signal
          end
 
+`ifndef NF10
          always @( posedge clk180 or posedge sync_sysReset )  // D-flop, async preset
+`else
+         always @( posedge clk90 or posedge sync_sysReset )  // D-flop, async preset
+`endif
          begin : We_phy_fd
             if ( sync_sysReset )
                phy_we_n <= 1'b1;
@@ -465,14 +503,22 @@
       end
 
       else if ( DEVICE_ARCH == 2'b01 )  begin : ref_virtex5_insts
+`ifndef NF10
          always @( posedge clk )
+`else
+         always @( posedge clk180 )
+`endif
          begin : Ref_fd
             ctlCmd[0]    <= ctl_Cmd[0];
             ctlCmd_d1[0] <= ctlCmd[0];
             TEST_REF_N   <= ctlCmd_d1[0];  // TEST probe for RC_REF_N output signal
          end
 
+`ifndef NF10
          always @( posedge clk180 or posedge sync_sysReset )  // D-flop, async preset
+`else
+         always @( posedge clk90 or posedge sync_sysReset )  // D-flop, async preset
+`endif
          begin : Ref_phy_fd
             if ( sync_sysReset )
                phy_ref_n <= 1'b1;
diff -u verilog.org/rld_data_path_iobs.v verilog.cur/rld_data_path_iobs.v
--- verilog.org/rld_data_path_iobs.v	2007-08-24 17:21:06.000000000 +0100
+++ verilog.cur/rld_data_path_iobs.v	2012-10-04 00:01:58.974014800 +0100
@@ -57,6 +57,8 @@
 //
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_data_path_iobs  (
@@ -250,6 +252,9 @@
 
       else if ( DEVICE_ARCH == 2'b01 )  begin : dq_virtex5_insts
          for ( i_dq = 0; i_dq < RL_DQ_WIDTH; i_dq = i_dq + 1)  begin: dq_bit_insts
+`ifdef NF10
+			if (i_dq % DEV_BYTE_WIDTH != 8)
+`endif
             rld_v5_dq_iob  dq  (
                .clk270          ( clk270 ),
                .bufio_clk       ( qk_bufio[(i_dq/QK_DATA_WIDTH)] ),
diff -u verilog.org/rld_dly_cal_sm.v verilog.cur/rld_dly_cal_sm.v
--- verilog.org/rld_dly_cal_sm.v	2007-08-24 17:21:06.000000000 +0100
+++ verilog.cur/rld_dly_cal_sm.v	2012-10-04 00:01:45.825262700 +0100
@@ -64,6 +64,8 @@
 //             attribute
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_dly_cal_sm  (
@@ -272,12 +274,41 @@
    // -----------------------------------------------------------------------------
    // Concatenate read data { QK_DATA_WIDTH-bit RISE : QK_DATA_WIDTH-bit FALL } before comparing with patterns
    // -----------------------------------------------------------------------------
+`ifndef NF10
    assign rd_data = {rd_data_rise, rd_data_fall};  // read data
    
    //Concatonate the Data for checking
    assign first_check_data  = { {QK_DATA_WIDTH/9{data1}}, {QK_DATA_WIDTH/9{data2}} };
    assign second_check_data = { {QK_DATA_WIDTH/9{data3}}, {QK_DATA_WIDTH/9{data4}} };
-                           
+`else
+   wire [2*QK_DATA_WIDTH-1:0] rd_data_orig, first_check_data_orig, second_check_data_orig;
+   
+   assign rd_data_orig = {rd_data_rise, rd_data_fall};  // read data
+   
+   //Concatonate the Data for checking
+   assign first_check_data_orig  = { {QK_DATA_WIDTH/9{data1}}, {QK_DATA_WIDTH/9{data2}} };
+   assign second_check_data_orig = { {QK_DATA_WIDTH/9{data3}}, {QK_DATA_WIDTH/9{data4}} };
+   
+   //Don't care bit 9. Only last 8 bit considered
+   assign rd_data = {1'b0, rd_data_orig[34-:8],
+		     1'b0, rd_data_orig[25-:8],
+		     1'b0, rd_data_orig[16-:8],
+		     1'b0, rd_data_orig[ 7-:8]
+		    };
+
+   assign first_check_data = {1'b0, first_check_data_orig[34-:8],
+		     	      1'b0, first_check_data_orig[25-:8],
+		     	      1'b0, first_check_data_orig[16-:8],
+		     	      1'b0, first_check_data_orig[ 7-:8]
+		    	     };
+
+   assign second_check_data = {1'b0, second_check_data_orig[34-:8],
+		     	       1'b0, second_check_data_orig[25-:8],
+		     	       1'b0, second_check_data_orig[16-:8],
+		     	       1'b0, second_check_data_orig[ 7-:8]
+		    	      };
+`endif
+
    // -----------------------------------------------------------------------------
    // Test Signals used for debugging
    // -----------------------------------------------------------------------------
diff -u verilog.org/rld_infrastructure_top.v verilog.cur/rld_infrastructure_top.v
--- verilog.org/rld_infrastructure_top.v	2007-08-24 17:21:06.000000000 +0100
+++ verilog.cur/rld_infrastructure_top.v	2012-10-03 23:56:43.670980500 +0100
@@ -57,13 +57,19 @@
 //
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_infrastructure_top  (
    sysClk_p,
+`ifndef NF10
    sysClk_n,
+`endif
    refClk_p,
+`ifndef NF10
    refClk_n,
+`endif
    sysReset,  // system reset input, acive low, asynchronous
 
    confMReg,
@@ -111,9 +117,13 @@
 // end of parameter definitions
 
    input                     sysClk_p;
+`ifndef NF10
    input                     sysClk_n;
+`endif
    input                     refClk_p;
+`ifndef NF10
    input                     refClk_n;
+`endif
    input                     sysReset; 
    input                     clk33;
 
@@ -173,9 +183,13 @@
    )
    clk_module0  (
       .sysClk_p  ( sysClk_p ),   // differential system clock input
+`ifndef NF10
       .sysClk_n  ( sysClk_n ),
+`endif
       .refClk_p  ( refClk_p ),   // differential reference clock input
+`ifndef NF10
       .refClk_n  ( refClk_n ),
+`endif
       .clk33     ( clk33 ),
       .sysReset  ( ~sysReset ),
       .clk       ( clk ),        // Global clock to all modules, output from DCM
diff -u verilog.org/rld_mem_interface_top.v verilog.cur/rld_mem_interface_top.v
--- verilog.org/rld_mem_interface_top.v	2007-08-24 17:21:06.000000000 +0100
+++ verilog.cur/rld_mem_interface_top.v	2012-10-03 23:55:50.001910800 +0100
@@ -62,13 +62,19 @@
 //             config 3, Memory DLL enabled by default. 
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_mem_interface_top  (
    refClk_p,
+`ifndef NF10
    refClk_n,
+`endif
    sysClk_p,
+`ifndef NF10
    sysClk_n,
+`endif
    sysReset,
    dip,
    clk33,
@@ -127,9 +133,13 @@
 
    // System signals and debug
    input            refClk_p;
+`ifndef NF10
    input            refClk_n;
+`endif
    input            sysClk_p;
+`ifndef NF10
    input            sysClk_n;
+`endif
    input            sysReset;
    input            dip;
    input            clk33;
@@ -210,9 +220,13 @@
    )
    infrastructure_top0  (
       .sysClk_p          ( sysClk_p ),
+`ifndef NF10
       .sysClk_n          ( sysClk_n ),
+`endif
       .refClk_p          ( refClk_p ),
+`ifndef NF10
       .refClk_n          ( refClk_n ),
+`endif
       .sysReset          ( sysReset ),     // system reset input, acive low, asynchronous
       .clk33             ( clk33 ),
 
@@ -335,7 +349,8 @@
    // -----------------------------------------------------------------------------
    // Chipscope module instantiations
    // -----------------------------------------------------------------------------
-   /*icon  i_icon  (
+`ifdef DEBUG
+   icon  i_icon  (
       .control0  ( cs_control0 )
    );
 
@@ -344,18 +359,22 @@
       .clk     ( cs_clk0 ),
       .data    ( cs_data0 ),
       .trig0   ( cs_trig0 )
-   ); */
+   );
 
    assign cs_clk0  = clk;
    //assign cs_clk0  = ~clk90; //use clk270 for checking phy signals
-   assign cs_data0 = { cs_io[255:0] };
+   // assign cs_data0 = { cs_io[255:0] };
    
+   assign cs_data0 = { 251'b0, PASS_FAIL[2:0], calibration_done, Init_Done };
 
-   assign cs_trig0 = { 10'b0,
-                       PASS_FAIL[2],    //Error Signal
-                       cs_io[111:100],  // f_cs, data cal SM for debug
-                       cs_io[95:93]     // ref[2], we[1], cs[0]
-                      };
+   // assign cs_trig0 = { 10'b0,
+                       // PASS_FAIL[2],    //Error Signal
+                       // cs_io[111:100],  // f_cs, data cal SM for debug
+                       // cs_io[95:93]     // ref[2], we[1], cs[0]
+                      // };
+					  
+   assign cs_trig0 = {11'b0, PASS_FAIL[2:0], calibration_done, Init_Done };
+`endif
 
 endmodule
 
diff -u verilog.org/rld_v4_qvld_iob.v verilog.cur/rld_v4_qvld_iob.v
--- verilog.org/rld_v4_qvld_iob.v	2007-08-24 17:21:06.000000000 +0100
+++ verilog.cur/rld_v4_qvld_iob.v	2012-10-04 00:00:58.296544200 +0100
@@ -59,6 +59,8 @@
 //
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_qvld_iob  #(
@@ -193,7 +195,9 @@
       .DLYINC    ( dlyinc ),
       .DLYRST    ( dlyrst ),
       .OCLK      ( clk270 ),     // high speed clock for memory apps, drive the serial-to-parallel converter
+`ifndef NF10
       .REV       ( gnd ),
+`endif
       .SHIFTIN1  ( ),
       .SHIFTIN2  ( ),
       .SR        ( reset )
diff -u verilog.org/rld_v5_dq_iob.v verilog.cur/rld_v5_dq_iob.v
--- verilog.org/rld_v5_dq_iob.v	2007-08-24 17:21:06.000000000 +0100
+++ verilog.cur/rld_v5_dq_iob.v	2012-10-04 00:00:45.763827400 +0100
@@ -59,6 +59,8 @@
 //
 //*****************************************************************************
 
+`include "nf10_defs.v"
+
 `timescale 1ns/100ps
 
 module  rld_v5_dq_iob  #(
@@ -167,7 +169,9 @@
       .DLYINC    ( dlyinc ),
       .DLYRST    ( dlyrst ),
       .OCLK      ( clk270 ),     // high speed clock for memory apps, drive the serial-to-parallel converter
+`ifndef NF10
       .REV       ( gnd ),
+`endif
       .SHIFTIN1  ( ),
       .SHIFTIN2  ( ),
       .SR        ( reset )
